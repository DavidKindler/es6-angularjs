#!/usr/bin/env node

// Usage: script/precompile
// Precompiles client/app to client/app-compiled and
//   client/admin to client/admin-compiled.

'use strict';

var glob = require('glob');
var precompile = require('./lib/precompile');
var mkdirp = require('mkdirp');
var path = require('path');
var fs = require('graceful-fs');
var RSVP = require('rsvp');
var Promise = RSVP.Promise;
var denodeify = RSVP.denodeify;

function copyFile(inFile, outFile) {
  return denodeify(fs.readFile)(inFile)
    .then(function(source) {
      return denodeify(fs.writeFile)(outFile, source);
    });
}

function processFiles(filePaths, baseDir) {
  return Promise.all(filePaths.map(function(filePath) {
    var inFile = filePath[0];
    var outFile = filePath[1];

    return denodeify(mkdirp)(path.resolve(baseDir, path.dirname(outFile)))
      .then(function() {
        if (inFile.match(/^(app|admin)\/.+\.js$/)) {
          return precompile.precompile(inFile, outFile, baseDir)
        } else {
          return copyFile(path.resolve(baseDir, inFile), path.resolve(baseDir, outFile));
        }
      });
  }));
}

function preCompileDir(inDir, outDir, baseDir) {
  return denodeify(glob)(path.join(path.resolve(baseDir, inDir), '**', '*'))
    .then(function(filePaths) {
      var filePathTuples = filePaths.map(function(filePath) {
        var inFile = path.relative(baseDir, filePath);
        var outFile = path.join(outDir, inFile.substr(inDir.length));
        return [inFile, outFile];
      });
      return processFiles(filePathTuples, baseDir);
    }).catch(function(rejection) {
      if (rejection.code !== 'EISDIR') {
        console.log(rejection);
        throw rejection;
      }
    });
}

preCompileDir('app', 'app-compiled', 'client');
preCompileDir('admin', 'admin-compiled', 'client');
